// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chatcleaner.proto

#include "chatcleaner.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr CleanerInitMessage::CleanerInitMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : clientsecret_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , requestedversion_(0u){}
struct CleanerInitMessageDefaultTypeInternal {
  constexpr CleanerInitMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CleanerInitMessageDefaultTypeInternal() {}
  union {
    CleanerInitMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CleanerInitMessageDefaultTypeInternal _CleanerInitMessage_default_instance_;
constexpr CleanerInitAckMessage::CleanerInitAckMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : serversecret_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serverversion_(0u){}
struct CleanerInitAckMessageDefaultTypeInternal {
  constexpr CleanerInitAckMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CleanerInitAckMessageDefaultTypeInternal() {}
  union {
    CleanerInitAckMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CleanerInitAckMessageDefaultTypeInternal _CleanerInitAckMessage_default_instance_;
constexpr CleanerChatRequestMessage::CleanerChatRequestMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : playername_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chatmessage_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , requestid_(0u)
  , cleanerchattype_(0)

  , gameid_(0u)
  , playerid_(0u){}
struct CleanerChatRequestMessageDefaultTypeInternal {
  constexpr CleanerChatRequestMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CleanerChatRequestMessageDefaultTypeInternal() {}
  union {
    CleanerChatRequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CleanerChatRequestMessageDefaultTypeInternal _CleanerChatRequestMessage_default_instance_;
constexpr CleanerChatReplyMessage::CleanerChatReplyMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cleanertext_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , requestid_(0u)
  , cleanerchattype_(0)

  , gameid_(0u)
  , playerid_(0u)
  , cleaneractiontype_(0)
{}
struct CleanerChatReplyMessageDefaultTypeInternal {
  constexpr CleanerChatReplyMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CleanerChatReplyMessageDefaultTypeInternal() {}
  union {
    CleanerChatReplyMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CleanerChatReplyMessageDefaultTypeInternal _CleanerChatReplyMessage_default_instance_;
constexpr ChatCleanerMessage::ChatCleanerMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cleanerinitmessage_(nullptr)
  , cleanerinitackmessage_(nullptr)
  , cleanerchatrequestmessage_(nullptr)
  , cleanerchatreplymessage_(nullptr)
  , messagetype_(1)
{}
struct ChatCleanerMessageDefaultTypeInternal {
  constexpr ChatCleanerMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChatCleanerMessageDefaultTypeInternal() {}
  union {
    ChatCleanerMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChatCleanerMessageDefaultTypeInternal _ChatCleanerMessage_default_instance_;
bool CleanerChatReplyMessage_CleanerActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CleanerChatReplyMessage_CleanerActionType_strings[5] = {};

static const char CleanerChatReplyMessage_CleanerActionType_names[] =
  "cleanerActionBan"
  "cleanerActionKick"
  "cleanerActionMute"
  "cleanerActionNone"
  "cleanerActionWarning";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CleanerChatReplyMessage_CleanerActionType_entries[] = {
  { {CleanerChatReplyMessage_CleanerActionType_names + 0, 16}, 3 },
  { {CleanerChatReplyMessage_CleanerActionType_names + 16, 17}, 2 },
  { {CleanerChatReplyMessage_CleanerActionType_names + 33, 17}, 4 },
  { {CleanerChatReplyMessage_CleanerActionType_names + 50, 17}, 0 },
  { {CleanerChatReplyMessage_CleanerActionType_names + 67, 20}, 1 },
};

static const int CleanerChatReplyMessage_CleanerActionType_entries_by_number[] = {
  3, // 0 -> cleanerActionNone
  4, // 1 -> cleanerActionWarning
  1, // 2 -> cleanerActionKick
  0, // 3 -> cleanerActionBan
  2, // 4 -> cleanerActionMute
};

const std::string& CleanerChatReplyMessage_CleanerActionType_Name(
    CleanerChatReplyMessage_CleanerActionType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CleanerChatReplyMessage_CleanerActionType_entries,
          CleanerChatReplyMessage_CleanerActionType_entries_by_number,
          5, CleanerChatReplyMessage_CleanerActionType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CleanerChatReplyMessage_CleanerActionType_entries,
      CleanerChatReplyMessage_CleanerActionType_entries_by_number,
      5, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CleanerChatReplyMessage_CleanerActionType_strings[idx].get();
}
bool CleanerChatReplyMessage_CleanerActionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CleanerChatReplyMessage_CleanerActionType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CleanerChatReplyMessage_CleanerActionType_entries, 5, name, &int_value);
  if (success) {
    *value = static_cast<CleanerChatReplyMessage_CleanerActionType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::cleanerActionNone;
constexpr CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::cleanerActionWarning;
constexpr CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::cleanerActionKick;
constexpr CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::cleanerActionBan;
constexpr CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::cleanerActionMute;
constexpr CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::CleanerActionType_MIN;
constexpr CleanerChatReplyMessage_CleanerActionType CleanerChatReplyMessage::CleanerActionType_MAX;
constexpr int CleanerChatReplyMessage::CleanerActionType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool ChatCleanerMessage_ChatCleanerMessageType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> ChatCleanerMessage_ChatCleanerMessageType_strings[4] = {};

static const char ChatCleanerMessage_ChatCleanerMessageType_names[] =
  "Type_CleanerChatReplyMessage"
  "Type_CleanerChatRequestMessage"
  "Type_CleanerInitAckMessage"
  "Type_CleanerInitMessage";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry ChatCleanerMessage_ChatCleanerMessageType_entries[] = {
  { {ChatCleanerMessage_ChatCleanerMessageType_names + 0, 28}, 4 },
  { {ChatCleanerMessage_ChatCleanerMessageType_names + 28, 30}, 3 },
  { {ChatCleanerMessage_ChatCleanerMessageType_names + 58, 26}, 2 },
  { {ChatCleanerMessage_ChatCleanerMessageType_names + 84, 23}, 1 },
};

static const int ChatCleanerMessage_ChatCleanerMessageType_entries_by_number[] = {
  3, // 1 -> Type_CleanerInitMessage
  2, // 2 -> Type_CleanerInitAckMessage
  1, // 3 -> Type_CleanerChatRequestMessage
  0, // 4 -> Type_CleanerChatReplyMessage
};

const std::string& ChatCleanerMessage_ChatCleanerMessageType_Name(
    ChatCleanerMessage_ChatCleanerMessageType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          ChatCleanerMessage_ChatCleanerMessageType_entries,
          ChatCleanerMessage_ChatCleanerMessageType_entries_by_number,
          4, ChatCleanerMessage_ChatCleanerMessageType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      ChatCleanerMessage_ChatCleanerMessageType_entries,
      ChatCleanerMessage_ChatCleanerMessageType_entries_by_number,
      4, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     ChatCleanerMessage_ChatCleanerMessageType_strings[idx].get();
}
bool ChatCleanerMessage_ChatCleanerMessageType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChatCleanerMessage_ChatCleanerMessageType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      ChatCleanerMessage_ChatCleanerMessageType_entries, 4, name, &int_value);
  if (success) {
    *value = static_cast<ChatCleanerMessage_ChatCleanerMessageType>(int_value);
  }
  return success;
}
#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage::Type_CleanerInitMessage;
constexpr ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage::Type_CleanerInitAckMessage;
constexpr ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage::Type_CleanerChatRequestMessage;
constexpr ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage::Type_CleanerChatReplyMessage;
constexpr ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage::ChatCleanerMessageType_MIN;
constexpr ChatCleanerMessage_ChatCleanerMessageType ChatCleanerMessage::ChatCleanerMessageType_MAX;
constexpr int ChatCleanerMessage::ChatCleanerMessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
bool CleanerChatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

static ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<std::string> CleanerChatType_strings[2] = {};

static const char CleanerChatType_names[] =
  "cleanerChatTypeGame"
  "cleanerChatTypeLobby";

static const ::PROTOBUF_NAMESPACE_ID::internal::EnumEntry CleanerChatType_entries[] = {
  { {CleanerChatType_names + 0, 19}, 1 },
  { {CleanerChatType_names + 19, 20}, 0 },
};

static const int CleanerChatType_entries_by_number[] = {
  1, // 0 -> cleanerChatTypeLobby
  0, // 1 -> cleanerChatTypeGame
};

const std::string& CleanerChatType_Name(
    CleanerChatType value) {
  static const bool dummy =
      ::PROTOBUF_NAMESPACE_ID::internal::InitializeEnumStrings(
          CleanerChatType_entries,
          CleanerChatType_entries_by_number,
          2, CleanerChatType_strings);
  (void) dummy;
  int idx = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumName(
      CleanerChatType_entries,
      CleanerChatType_entries_by_number,
      2, value);
  return idx == -1 ? ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString() :
                     CleanerChatType_strings[idx].get();
}
bool CleanerChatType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CleanerChatType* value) {
  int int_value;
  bool success = ::PROTOBUF_NAMESPACE_ID::internal::LookUpEnumValue(
      CleanerChatType_entries, 2, name, &int_value);
  if (success) {
    *value = static_cast<CleanerChatType>(int_value);
  }
  return success;
}

// ===================================================================

class CleanerInitMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CleanerInitMessage>()._has_bits_);
  static void set_has_requestedversion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_clientsecret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CleanerInitMessage::CleanerInitMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CleanerInitMessage)
}
CleanerInitMessage::CleanerInitMessage(const CleanerInitMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  clientsecret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    clientsecret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_clientsecret()) {
    clientsecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clientsecret(), 
      GetArenaForAllocation());
  }
  requestedversion_ = from.requestedversion_;
  // @@protoc_insertion_point(copy_constructor:CleanerInitMessage)
}

inline void CleanerInitMessage::SharedCtor() {
clientsecret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clientsecret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
requestedversion_ = 0u;
}

CleanerInitMessage::~CleanerInitMessage() {
  // @@protoc_insertion_point(destructor:CleanerInitMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CleanerInitMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  clientsecret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CleanerInitMessage::ArenaDtor(void* object) {
  CleanerInitMessage* _this = reinterpret_cast< CleanerInitMessage* >(object);
  (void)_this;
}
void CleanerInitMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CleanerInitMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CleanerInitMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CleanerInitMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    clientsecret_.ClearNonDefaultToEmpty();
  }
  requestedversion_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CleanerInitMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 requestedVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_requestedversion(&has_bits);
          requestedversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string clientSecret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_clientsecret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CleanerInitMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CleanerInitMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 requestedVersion = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestedversion(), target);
  }

  // required string clientSecret = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_clientsecret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CleanerInitMessage)
  return target;
}

size_t CleanerInitMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CleanerInitMessage)
  size_t total_size = 0;

  if (_internal_has_clientsecret()) {
    // required string clientSecret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientsecret());
  }

  if (_internal_has_requestedversion()) {
    // required uint32 requestedVersion = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_requestedversion());
  }

  return total_size;
}
size_t CleanerInitMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CleanerInitMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string clientSecret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clientsecret());

    // required uint32 requestedVersion = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_requestedversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CleanerInitMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CleanerInitMessage*>(
      &from));
}

void CleanerInitMessage::MergeFrom(const CleanerInitMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CleanerInitMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_clientsecret(from._internal_clientsecret());
    }
    if (cached_has_bits & 0x00000002u) {
      requestedversion_ = from.requestedversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CleanerInitMessage::CopyFrom(const CleanerInitMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CleanerInitMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanerInitMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CleanerInitMessage::InternalSwap(CleanerInitMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &clientsecret_, lhs_arena,
      &other->clientsecret_, rhs_arena
  );
  swap(requestedversion_, other->requestedversion_);
}

std::string CleanerInitMessage::GetTypeName() const {
  return "CleanerInitMessage";
}


// ===================================================================

class CleanerInitAckMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CleanerInitAckMessage>()._has_bits_);
  static void set_has_serverversion(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_serversecret(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

CleanerInitAckMessage::CleanerInitAckMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CleanerInitAckMessage)
}
CleanerInitAckMessage::CleanerInitAckMessage(const CleanerInitAckMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  serversecret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    serversecret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_serversecret()) {
    serversecret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serversecret(), 
      GetArenaForAllocation());
  }
  serverversion_ = from.serverversion_;
  // @@protoc_insertion_point(copy_constructor:CleanerInitAckMessage)
}

inline void CleanerInitAckMessage::SharedCtor() {
serversecret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  serversecret_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
serverversion_ = 0u;
}

CleanerInitAckMessage::~CleanerInitAckMessage() {
  // @@protoc_insertion_point(destructor:CleanerInitAckMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CleanerInitAckMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  serversecret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CleanerInitAckMessage::ArenaDtor(void* object) {
  CleanerInitAckMessage* _this = reinterpret_cast< CleanerInitAckMessage* >(object);
  (void)_this;
}
void CleanerInitAckMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CleanerInitAckMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CleanerInitAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CleanerInitAckMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    serversecret_.ClearNonDefaultToEmpty();
  }
  serverversion_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CleanerInitAckMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 serverVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_serverversion(&has_bits);
          serverversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string serverSecret = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_serversecret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CleanerInitAckMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CleanerInitAckMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 serverVersion = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_serverversion(), target);
  }

  // required string serverSecret = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_serversecret(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CleanerInitAckMessage)
  return target;
}

size_t CleanerInitAckMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CleanerInitAckMessage)
  size_t total_size = 0;

  if (_internal_has_serversecret()) {
    // required string serverSecret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serversecret());
  }

  if (_internal_has_serverversion()) {
    // required uint32 serverVersion = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_serverversion());
  }

  return total_size;
}
size_t CleanerInitAckMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CleanerInitAckMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string serverSecret = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serversecret());

    // required uint32 serverVersion = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_serverversion());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CleanerInitAckMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CleanerInitAckMessage*>(
      &from));
}

void CleanerInitAckMessage::MergeFrom(const CleanerInitAckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CleanerInitAckMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_serversecret(from._internal_serversecret());
    }
    if (cached_has_bits & 0x00000002u) {
      serverversion_ = from.serverversion_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CleanerInitAckMessage::CopyFrom(const CleanerInitAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CleanerInitAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanerInitAckMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CleanerInitAckMessage::InternalSwap(CleanerInitAckMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serversecret_, lhs_arena,
      &other->serversecret_, rhs_arena
  );
  swap(serverversion_, other->serverversion_);
}

std::string CleanerInitAckMessage::GetTypeName() const {
  return "CleanerInitAckMessage";
}


// ===================================================================

class CleanerChatRequestMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CleanerChatRequestMessage>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_cleanerchattype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_playername(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_chatmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000002f) ^ 0x0000002f) != 0;
  }
};

CleanerChatRequestMessage::CleanerChatRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CleanerChatRequestMessage)
}
CleanerChatRequestMessage::CleanerChatRequestMessage(const CleanerChatRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    playername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_playername()) {
    playername_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_playername(), 
      GetArenaForAllocation());
  }
  chatmessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chatmessage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_chatmessage()) {
    chatmessage_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chatmessage(), 
      GetArenaForAllocation());
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(playerid_));
  // @@protoc_insertion_point(copy_constructor:CleanerChatRequestMessage)
}

inline void CleanerChatRequestMessage::SharedCtor() {
playername_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  playername_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
chatmessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chatmessage_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&requestid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&playerid_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(playerid_));
}

CleanerChatRequestMessage::~CleanerChatRequestMessage() {
  // @@protoc_insertion_point(destructor:CleanerChatRequestMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CleanerChatRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  playername_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chatmessage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CleanerChatRequestMessage::ArenaDtor(void* object) {
  CleanerChatRequestMessage* _this = reinterpret_cast< CleanerChatRequestMessage* >(object);
  (void)_this;
}
void CleanerChatRequestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CleanerChatRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CleanerChatRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CleanerChatRequestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      playername_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      chatmessage_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000003cu) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&playerid_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(playerid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CleanerChatRequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .CleanerChatType cleanerChatType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CleanerChatType_IsValid(val))) {
            _internal_set_cleanerchattype(static_cast<::CleanerChatType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gameId = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 playerId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string playerName = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_playername();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required string chatMessage = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_chatmessage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CleanerChatRequestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CleanerChatRequestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestid(), target);
  }

  // required .CleanerChatType cleanerChatType = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_cleanerchattype(), target);
  }

  // optional uint32 gameId = 3 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gameid(), target);
  }

  // required uint32 playerId = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_playerid(), target);
  }

  // required string playerName = 5;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_playername(), target);
  }

  // required string chatMessage = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_chatmessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CleanerChatRequestMessage)
  return target;
}

size_t CleanerChatRequestMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CleanerChatRequestMessage)
  size_t total_size = 0;

  if (_internal_has_playername()) {
    // required string playerName = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playername());
  }

  if (_internal_has_chatmessage()) {
    // required string chatMessage = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chatmessage());
  }

  if (_internal_has_requestid()) {
    // required uint32 requestId = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_requestid());
  }

  if (_internal_has_cleanerchattype()) {
    // required .CleanerChatType cleanerChatType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cleanerchattype());
  }

  if (_internal_has_playerid()) {
    // required uint32 playerId = 4;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  return total_size;
}
size_t CleanerChatRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CleanerChatRequestMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000002f) ^ 0x0000002f) == 0) {  // All required fields are present.
    // required string playerName = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_playername());

    // required string chatMessage = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chatmessage());

    // required uint32 requestId = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_requestid());

    // required .CleanerChatType cleanerChatType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cleanerchattype());

    // required uint32 playerId = 4;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 gameId = 3 [default = 0];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CleanerChatRequestMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CleanerChatRequestMessage*>(
      &from));
}

void CleanerChatRequestMessage::MergeFrom(const CleanerChatRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CleanerChatRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_playername(from._internal_playername());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_chatmessage(from._internal_chatmessage());
    }
    if (cached_has_bits & 0x00000004u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000008u) {
      cleanerchattype_ = from.cleanerchattype_;
    }
    if (cached_has_bits & 0x00000010u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000020u) {
      playerid_ = from.playerid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CleanerChatRequestMessage::CopyFrom(const CleanerChatRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CleanerChatRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanerChatRequestMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CleanerChatRequestMessage::InternalSwap(CleanerChatRequestMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &playername_, lhs_arena,
      &other->playername_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chatmessage_, lhs_arena,
      &other->chatmessage_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CleanerChatRequestMessage, playerid_)
      + sizeof(CleanerChatRequestMessage::playerid_)
      - PROTOBUF_FIELD_OFFSET(CleanerChatRequestMessage, requestid_)>(
          reinterpret_cast<char*>(&requestid_),
          reinterpret_cast<char*>(&other->requestid_));
}

std::string CleanerChatRequestMessage::GetTypeName() const {
  return "CleanerChatRequestMessage";
}


// ===================================================================

class CleanerChatReplyMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<CleanerChatReplyMessage>()._has_bits_);
  static void set_has_requestid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_cleanerchattype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_gameid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_playerid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_cleaneractiontype(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_cleanertext(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000036) ^ 0x00000036) != 0;
  }
};

CleanerChatReplyMessage::CleanerChatReplyMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:CleanerChatReplyMessage)
}
CleanerChatReplyMessage::CleanerChatReplyMessage(const CleanerChatReplyMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  cleanertext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cleanertext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_cleanertext()) {
    cleanertext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cleanertext(), 
      GetArenaForAllocation());
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&cleaneractiontype_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(cleaneractiontype_));
  // @@protoc_insertion_point(copy_constructor:CleanerChatReplyMessage)
}

inline void CleanerChatReplyMessage::SharedCtor() {
cleanertext_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cleanertext_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&requestid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cleaneractiontype_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(cleaneractiontype_));
}

CleanerChatReplyMessage::~CleanerChatReplyMessage() {
  // @@protoc_insertion_point(destructor:CleanerChatReplyMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void CleanerChatReplyMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cleanertext_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CleanerChatReplyMessage::ArenaDtor(void* object) {
  CleanerChatReplyMessage* _this = reinterpret_cast< CleanerChatReplyMessage* >(object);
  (void)_this;
}
void CleanerChatReplyMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CleanerChatReplyMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CleanerChatReplyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:CleanerChatReplyMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    cleanertext_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&requestid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cleaneractiontype_) -
        reinterpret_cast<char*>(&requestid_)) + sizeof(cleaneractiontype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* CleanerChatReplyMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_requestid(&has_bits);
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .CleanerChatType cleanerChatType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CleanerChatType_IsValid(val))) {
            _internal_set_cleanerchattype(static_cast<::CleanerChatType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional uint32 gameId = 3 [default = 0];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_gameid(&has_bits);
          gameid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required uint32 playerId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_playerid(&has_bits);
          playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .CleanerChatReplyMessage.CleanerActionType cleanerActionType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::CleanerChatReplyMessage_CleanerActionType_IsValid(val))) {
            _internal_set_cleaneractiontype(static_cast<::CleanerChatReplyMessage_CleanerActionType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional string cleanerText = 6 [default = ""];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_cleanertext();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CleanerChatReplyMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:CleanerChatReplyMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 requestId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestid(), target);
  }

  // required .CleanerChatType cleanerChatType = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_cleanerchattype(), target);
  }

  // optional uint32 gameId = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_gameid(), target);
  }

  // required uint32 playerId = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_playerid(), target);
  }

  // required .CleanerChatReplyMessage.CleanerActionType cleanerActionType = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_cleaneractiontype(), target);
  }

  // optional string cleanerText = 6 [default = ""];
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_cleanertext(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CleanerChatReplyMessage)
  return target;
}

size_t CleanerChatReplyMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CleanerChatReplyMessage)
  size_t total_size = 0;

  if (_internal_has_requestid()) {
    // required uint32 requestId = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_requestid());
  }

  if (_internal_has_cleanerchattype()) {
    // required .CleanerChatType cleanerChatType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cleanerchattype());
  }

  if (_internal_has_playerid()) {
    // required uint32 playerId = 4;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());
  }

  if (_internal_has_cleaneractiontype()) {
    // required .CleanerChatReplyMessage.CleanerActionType cleanerActionType = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cleaneractiontype());
  }

  return total_size;
}
size_t CleanerChatReplyMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CleanerChatReplyMessage)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000036) ^ 0x00000036) == 0) {  // All required fields are present.
    // required uint32 requestId = 1;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_requestid());

    // required .CleanerChatType cleanerChatType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cleanerchattype());

    // required uint32 playerId = 4;
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_playerid());

    // required .CleanerChatReplyMessage.CleanerActionType cleanerActionType = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cleaneractiontype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string cleanerText = 6 [default = ""];
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cleanertext());
  }

  // optional uint32 gameId = 3 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_gameid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CleanerChatReplyMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const CleanerChatReplyMessage*>(
      &from));
}

void CleanerChatReplyMessage::MergeFrom(const CleanerChatReplyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CleanerChatReplyMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_cleanertext(from._internal_cleanertext());
    }
    if (cached_has_bits & 0x00000002u) {
      requestid_ = from.requestid_;
    }
    if (cached_has_bits & 0x00000004u) {
      cleanerchattype_ = from.cleanerchattype_;
    }
    if (cached_has_bits & 0x00000008u) {
      gameid_ = from.gameid_;
    }
    if (cached_has_bits & 0x00000010u) {
      playerid_ = from.playerid_;
    }
    if (cached_has_bits & 0x00000020u) {
      cleaneractiontype_ = from.cleaneractiontype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void CleanerChatReplyMessage::CopyFrom(const CleanerChatReplyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CleanerChatReplyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CleanerChatReplyMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void CleanerChatReplyMessage::InternalSwap(CleanerChatReplyMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cleanertext_, lhs_arena,
      &other->cleanertext_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CleanerChatReplyMessage, cleaneractiontype_)
      + sizeof(CleanerChatReplyMessage::cleaneractiontype_)
      - PROTOBUF_FIELD_OFFSET(CleanerChatReplyMessage, requestid_)>(
          reinterpret_cast<char*>(&requestid_),
          reinterpret_cast<char*>(&other->requestid_));
}

std::string CleanerChatReplyMessage::GetTypeName() const {
  return "CleanerChatReplyMessage";
}


// ===================================================================

class ChatCleanerMessage::_Internal {
 public:
  using HasBits = decltype(std::declval<ChatCleanerMessage>()._has_bits_);
  static void set_has_messagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::CleanerInitMessage& cleanerinitmessage(const ChatCleanerMessage* msg);
  static void set_has_cleanerinitmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::CleanerInitAckMessage& cleanerinitackmessage(const ChatCleanerMessage* msg);
  static void set_has_cleanerinitackmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::CleanerChatRequestMessage& cleanerchatrequestmessage(const ChatCleanerMessage* msg);
  static void set_has_cleanerchatrequestmessage(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::CleanerChatReplyMessage& cleanerchatreplymessage(const ChatCleanerMessage* msg);
  static void set_has_cleanerchatreplymessage(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000010) ^ 0x00000010) != 0;
  }
};

const ::CleanerInitMessage&
ChatCleanerMessage::_Internal::cleanerinitmessage(const ChatCleanerMessage* msg) {
  return *msg->cleanerinitmessage_;
}
const ::CleanerInitAckMessage&
ChatCleanerMessage::_Internal::cleanerinitackmessage(const ChatCleanerMessage* msg) {
  return *msg->cleanerinitackmessage_;
}
const ::CleanerChatRequestMessage&
ChatCleanerMessage::_Internal::cleanerchatrequestmessage(const ChatCleanerMessage* msg) {
  return *msg->cleanerchatrequestmessage_;
}
const ::CleanerChatReplyMessage&
ChatCleanerMessage::_Internal::cleanerchatreplymessage(const ChatCleanerMessage* msg) {
  return *msg->cleanerchatreplymessage_;
}
ChatCleanerMessage::ChatCleanerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ChatCleanerMessage)
}
ChatCleanerMessage::ChatCleanerMessage(const ChatCleanerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::MessageLite(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
  if (from._internal_has_cleanerinitmessage()) {
    cleanerinitmessage_ = new ::CleanerInitMessage(*from.cleanerinitmessage_);
  } else {
    cleanerinitmessage_ = nullptr;
  }
  if (from._internal_has_cleanerinitackmessage()) {
    cleanerinitackmessage_ = new ::CleanerInitAckMessage(*from.cleanerinitackmessage_);
  } else {
    cleanerinitackmessage_ = nullptr;
  }
  if (from._internal_has_cleanerchatrequestmessage()) {
    cleanerchatrequestmessage_ = new ::CleanerChatRequestMessage(*from.cleanerchatrequestmessage_);
  } else {
    cleanerchatrequestmessage_ = nullptr;
  }
  if (from._internal_has_cleanerchatreplymessage()) {
    cleanerchatreplymessage_ = new ::CleanerChatReplyMessage(*from.cleanerchatreplymessage_);
  } else {
    cleanerchatreplymessage_ = nullptr;
  }
  messagetype_ = from.messagetype_;
  // @@protoc_insertion_point(copy_constructor:ChatCleanerMessage)
}

inline void ChatCleanerMessage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cleanerinitmessage_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cleanerchatreplymessage_) -
    reinterpret_cast<char*>(&cleanerinitmessage_)) + sizeof(cleanerchatreplymessage_));
messagetype_ = 1;
}

ChatCleanerMessage::~ChatCleanerMessage() {
  // @@protoc_insertion_point(destructor:ChatCleanerMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<std::string>();
}

inline void ChatCleanerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete cleanerinitmessage_;
  if (this != internal_default_instance()) delete cleanerinitackmessage_;
  if (this != internal_default_instance()) delete cleanerchatrequestmessage_;
  if (this != internal_default_instance()) delete cleanerchatreplymessage_;
}

void ChatCleanerMessage::ArenaDtor(void* object) {
  ChatCleanerMessage* _this = reinterpret_cast< ChatCleanerMessage* >(object);
  (void)_this;
}
void ChatCleanerMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChatCleanerMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChatCleanerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:ChatCleanerMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(cleanerinitmessage_ != nullptr);
      cleanerinitmessage_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(cleanerinitackmessage_ != nullptr);
      cleanerinitackmessage_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(cleanerchatrequestmessage_ != nullptr);
      cleanerchatrequestmessage_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(cleanerchatreplymessage_ != nullptr);
      cleanerchatreplymessage_->Clear();
    }
    messagetype_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<std::string>();
}

const char* ChatCleanerMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .ChatCleanerMessage.ChatCleanerMessageType messageType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::ChatCleanerMessage_ChatCleanerMessageType_IsValid(val))) {
            _internal_set_messagetype(static_cast<::ChatCleanerMessage_ChatCleanerMessageType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .CleanerInitMessage cleanerInitMessage = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cleanerinitmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CleanerInitAckMessage cleanerInitAckMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_cleanerinitackmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CleanerChatRequestMessage cleanerChatRequestMessage = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cleanerchatrequestmessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .CleanerChatReplyMessage cleanerChatReplyMessage = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_cleanerchatreplymessage(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<std::string>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChatCleanerMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ChatCleanerMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .ChatCleanerMessage.ChatCleanerMessageType messageType = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_messagetype(), target);
  }

  // optional .CleanerInitMessage cleanerInitMessage = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cleanerinitmessage(this), target, stream);
  }

  // optional .CleanerInitAckMessage cleanerInitAckMessage = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::cleanerinitackmessage(this), target, stream);
  }

  // optional .CleanerChatRequestMessage cleanerChatRequestMessage = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cleanerchatrequestmessage(this), target, stream);
  }

  // optional .CleanerChatReplyMessage cleanerChatReplyMessage = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::cleanerchatreplymessage(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = stream->WriteRaw(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).data(),
        static_cast<int>(_internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ChatCleanerMessage)
  return target;
}

size_t ChatCleanerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ChatCleanerMessage)
  size_t total_size = 0;

  // required .ChatCleanerMessage.ChatCleanerMessageType messageType = 1;
  if (_internal_has_messagetype()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_messagetype());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .CleanerInitMessage cleanerInitMessage = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cleanerinitmessage_);
    }

    // optional .CleanerInitAckMessage cleanerInitAckMessage = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cleanerinitackmessage_);
    }

    // optional .CleanerChatRequestMessage cleanerChatRequestMessage = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cleanerchatrequestmessage_);
    }

    // optional .CleanerChatReplyMessage cleanerChatReplyMessage = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *cleanerchatreplymessage_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    total_size += _internal_metadata_.unknown_fields<std::string>(::PROTOBUF_NAMESPACE_ID::internal::GetEmptyString).size();
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChatCleanerMessage::CheckTypeAndMergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::MessageLite& from) {
  MergeFrom(*::PROTOBUF_NAMESPACE_ID::internal::DownCast<const ChatCleanerMessage*>(
      &from));
}

void ChatCleanerMessage::MergeFrom(const ChatCleanerMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ChatCleanerMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_cleanerinitmessage()->::CleanerInitMessage::MergeFrom(from._internal_cleanerinitmessage());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_cleanerinitackmessage()->::CleanerInitAckMessage::MergeFrom(from._internal_cleanerinitackmessage());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_cleanerchatrequestmessage()->::CleanerChatRequestMessage::MergeFrom(from._internal_cleanerchatrequestmessage());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_cleanerchatreplymessage()->::CleanerChatReplyMessage::MergeFrom(from._internal_cleanerchatreplymessage());
    }
    if (cached_has_bits & 0x00000010u) {
      messagetype_ = from.messagetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  _internal_metadata_.MergeFrom<std::string>(from._internal_metadata_);
}

void ChatCleanerMessage::CopyFrom(const ChatCleanerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ChatCleanerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChatCleanerMessage::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_cleanerinitmessage()) {
    if (!cleanerinitmessage_->IsInitialized()) return false;
  }
  if (_internal_has_cleanerinitackmessage()) {
    if (!cleanerinitackmessage_->IsInitialized()) return false;
  }
  if (_internal_has_cleanerchatrequestmessage()) {
    if (!cleanerchatrequestmessage_->IsInitialized()) return false;
  }
  if (_internal_has_cleanerchatreplymessage()) {
    if (!cleanerchatreplymessage_->IsInitialized()) return false;
  }
  return true;
}

void ChatCleanerMessage::InternalSwap(ChatCleanerMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChatCleanerMessage, cleanerchatreplymessage_)
      + sizeof(ChatCleanerMessage::cleanerchatreplymessage_)
      - PROTOBUF_FIELD_OFFSET(ChatCleanerMessage, cleanerinitmessage_)>(
          reinterpret_cast<char*>(&cleanerinitmessage_),
          reinterpret_cast<char*>(&other->cleanerinitmessage_));
  swap(messagetype_, other->messagetype_);
}

std::string ChatCleanerMessage::GetTypeName() const {
  return "ChatCleanerMessage";
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::CleanerInitMessage* Arena::CreateMaybeMessage< ::CleanerInitMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CleanerInitMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CleanerInitAckMessage* Arena::CreateMaybeMessage< ::CleanerInitAckMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CleanerInitAckMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CleanerChatRequestMessage* Arena::CreateMaybeMessage< ::CleanerChatRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CleanerChatRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::CleanerChatReplyMessage* Arena::CreateMaybeMessage< ::CleanerChatReplyMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::CleanerChatReplyMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::ChatCleanerMessage* Arena::CreateMaybeMessage< ::ChatCleanerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ChatCleanerMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
